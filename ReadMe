
* spring boot project

2022.04.27

    1. 회원 가입 기능 구현하기

    - 회원 정보를 저장할 User 엔티티 생성
    - 회원가입 View로 넘어오는 데이터를 받는 UserFormDto 생성
    - User 엔티티를 저장할 수 있는 UserRepository 생성
    - UserService에서 saveUser 메서드 생성 -> user 저장하기전에 유효성 검사(userId, userEmail, userNickName)
    - controller에서 회원가입에 관한 getMapping, postMapping 메서드 생성
    - Auditing을 이용해 엔티티별로 사용되는 공통 기능을 관리(등록자, 수정자, 등록시간, 수정시간)
    - 코드 작성후 테스트 코드를 통해 테스트 수행

    2. 로그인/ 로그아웃 구현하기
    - 작업 진행중

    2022.04.28

    3. 회원 가입 시 이메일 인증 개발 진행중

    - Gmail로 인증 코드를 보내 회원가입시에 활용하는 기능 개발

    2022.04.30

    3. 회원 가입 시 이메일 인증 개발 진행중

    - Gmail로 인증 코드를 보내 회원가입시에 활용하는 기능 개발 90프로 완료
    - 회원가입 페이지에서 가입버튼 누른후 회원가입때 입력한 메일로 인증 코드 전송
    - 메일의 인증코드를 인증 화면 등록하면 회원 가입 완료
    - 내일 추가 개발 사항 : 인증 코드 유효성 검사까지 하면 기능 개발 100프로 달성.

    2022.05.01

    3. 회원 가입 시 이메일 인증 개발 완료

    - 가입 페이지 -> 인증 페이지 -> 인증완료 후) 로그인 페이지

2022.05.02

4. 장바구니, 주문 엔티티 설계

    *. 장바구니 엔티티 설계

    - 장바구니_T 1:1 회원_T

    - 장바구니 정보를 저장할 Entity 생성 -> Cart
    - 한명의 유저는 하나의 장바구니를 가진다. @One to One()

    *. 장바구니 아이템 엔티티 설계

    - 장바구니_아이템_T n:1 장바구니_T
    - 장바구니_아이템_T n:1 아이템_T

    - 장바구니에 담길 아이템 정보를 저장할 Entity 생성 -> CartItem
    - 하나의 장바구니에는 많은 아이템(상품)이 담긴다 @ManyToOne()
    - 장바구니에 담길 아이템(상품)의 정보도 조인해줘야함 -> @ManyToOne()

    *. 주문 엔티티 설계하기

    - 주문_T n:1 회원_T
    - 주문_아이템_T n:1 주문_T

    - 주문 정보를 담을 Entity 생성 -> Order
    - 한명의 회원이 여러번 주문할 수 있음 -> @ManyToOne()
    - 하나의 주문에 여러 아이템(상품)을 주문 가능 -> @ManyToOne()
    - 지금 order_id로 양방향 관계가 형성됨 주문에 속한 상품이 어떤 상품들이 있는지 알 수 있고,
      주문 상품은 어떤 주문에 속하는지를 알 수 있음.
    - 연관 관계의 주인을 정해야함 @OneToMany(mappedBy = "order")
    - 하나의 주문이 여러 개의 주문 상품을 갖으므로 List 자료형을 사용해 매핑 List<OrderItem>
    - @OneToMany 에서는 옵션으로 고아 객체 제거가 가능하다. 주문은 삭제 되었는데 그 주문에 있던
      주문 아이템이 남아있는게 좋지 않다

5. 상품 등록하기

    - 상품의 이미지 정보를 담을 Entity 생성 -> ItemImg
    - 하나의 상품은 여러 이미지를 담을 수 있다 -> @ManyToOne ()
    - 상품을 등록할 때는 화면으로부터 전달받은 DTO 객체를 엔티티 객체로 변환, mapper 이용
    - 상품을 조회할 때는 엔티티 객체를 DTO 객체로 바꿔주는 작업을 해야함
    - 상품의 데이터 정보를 전달하는 DTO 생성 ItemFormDto
    - 상품 이미지 정보를 저장하기 위해 ItemImgRepository 인터페이스 생성
    - 상품 이미지를 업로드하고 상품 이미지 정보를 저장하는 ItemImgService 생성
    - 상품을 등록하는 ItemService 생성
    - 상품을 등록하는 ItemController 생성


6. 상품 수정하기

    - 수정을 하기 위해서는 먼저 등록된 상품을 불러오는 메소드를 ItemService 에 추가 -> getItemDetal(itemId)
    - itemId를 통해 상품이미지와 상품정보를 ItemFormDto 로 리턴받는다
    - 조회한 ItemFormDto를 컨트롤러를 통해 view로 내려준다 itemService.getItemDetaol(itemId) -> model.addAttribute("itemformDto",itemformDto);
    - 수정을 하기 위해 updateItemImg를 ItemImgService에 추가
    - 상품을 업데이트 하기 위해서 Item 엔티티에 updateItem 메소드 추가
    - ItemService 에서 updateItem 메소드를 만든다
    - ItemController 에 상품을 수정하는 URL을 만드는 메소드 추가
---------------------------------------------------------------------------------------

2022.05.03

7. 상품 관리 페이지

   - 상품 상세 페이지로 진입할 수 있는 상품 관리 페이지를 만든다
   - 상품 관리 페이지는 상품 등록일, 상품 판매 상태, 상품명 or 상품 등록자 아이디를 조회 조건으로 한다.
   - 상품 데이터 조회 시 상품 조회 조건을 가지는 ItemSearchDto
   - 페이징 작업도 같이 진행

8. 메인 화면

    - 간단한 메인 페이지를 구성한다
    - 메인 페이지 구성은 등록한 상품이 보이는 형태로 구성(개발 초기)
    - 메인 페이지에서 상품을 보여줄 때 사용할 MainItemDto 생성
    - @QueryProjection을 이용하여 상품 조회 시 DTO 객체를 DTO객체 클래스 변환과정 없이 바로 뽑을 수 있음.
